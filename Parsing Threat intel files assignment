#Classwork code/notes:

# Array of websites containing threat intell
$drop_urls = @('https://rules.emergingthreats.net/blockrules/emerging-botcc.rules', 'https://rules.emergingthreats.net/blockrules/compromised-ips.txt', 'https://feodotracker.abuse.ch/downloads/ipblocklist_recommended.txt')

#loop through the URLs for the rules list
foreach ($u in $drop_urls) {

    #extract file name
    $temp = $u.split("/")
    $file_name = $temp[-1]

    #last element in the array plucked off is the filename
    if (Test-Path $file_name) {

    continue 

    } else {
    #download rules list

         Invoke-WebRequest -Uri $u -Outfile $file_name

    } #end else
    } #end for each

#Array containing file name

$input_paths = @('.\compromised-ips.txt','.\emerging-botcc.rules','ipblocklist_recommended.txt')

#Extract IP Addresses
$regex_drop = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'

#Append the IP Addresses to temporary ip list
select-String -Path $input_paths -Pattern $regex_drop | `
ForEach-Object {$_.Matches } | `
ForEach-Object {$_.Value } | Sort-Object | Get-Unique | Out-File -FilePath "ips-bad.tmp"


#Homework code: 

$ruleSet = '.\ips-bad.tmp'
$message = read-host -prompt "Enter 0 for IPTables ruleset, 1 for Cisco ruleset, or 2 for Windows Ruleset"
switch ($message) {
  0 { 
    $result = (Get-Content -Path $ruleSet) | `
    % { $_ -replace "^","iptables -A INPUT -s " -replace "$", "-j DROP"} |`
    Out-File -FilePath "iptables.bash"
   
    }

    #Cisco
    #access-list 1 deny host 192.168.10.1
   1 { 
   $result = (Get-Content -Path $ruleSet) | `
    % { $_ -replace "^","access-list 1 deny host " -replace "$"} |`
    Out-File -FilePath "cisco.bash"
    }

    #Windows 
    #netsh advfirewall firewall add rulename ="IPBlock"dir=in interface=any action =block remoteip =<IP_Address>/32
   2 {
    $result = (Get-Content -Path $ruleSet) | `
    % { $_ -replace "^","netsh advfirewall firewall add rulename='IPBlock' dir=in interface=any action=block remoteip=" -replace "$"} |`
    Out-File -FilePath "windows.bash"
   }
}
